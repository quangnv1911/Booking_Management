@page
@model Group5_SE1730_BookingManagement.Pages.Chats.IndexModel
@{

}

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
<link rel="stylesheet" href="~/css/Chat/chat.css" asp-append-version="true" />
<div id="notificationBar" class="alert alert-info" style="display: none;">
    New message received! 
</div>

<div class="container">
    <div class="row clearfix">
        <div class="col-lg-12">
            <div class="card chat-app">
                <div id="plist" class="people-list">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-search"></i></span>
                        </div>
                        <input type="text" class="form-control" placeholder="Search...">
                    </div>
                    <ul class="list-unstyled chat-list mt-2 mb-0" id="inboxListHistory">
                        @await Html.PartialAsync("_ConversationList", Model)
                    </ul>
                </div>
                <div class="chat">
                    <div class="chat-header clearfix">
                        <div class="row">
                            <div class="col-lg-6">
                                @if (Model.OppositeUser.LastName != null)
                                {
                                    <a href="javascript:void(0);" data-toggle="modal" data-target="#view_info">
                                        <img src="https://bootdey.com/img/Content/avatar/avatar2.png" alt="avatar">
                                    </a>
                                    <div class="chat-about">
                                        <h6 class="m-b-0">@Model.OppositeUser.UserName</h6>
                                    </div>
                                }
                            </div>

                        </div>
                    </div>
                    <div class="chat-history">
                        <ul class="m-b-0" id="chat-list-history"> 
                            @await Html.PartialAsync("_MessageList", Model)
                        </ul>
                    </div>
                    <div class="chat-message clearfix">
                        <div class="input-group mb-0">

                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fa fa-send"></i></span>
                            </div>
                            <form method="post">
                                <input asasp-for="@Model.OppositeUser" hidden />
                                <input asp-for="@Model.NewMessage" id="messageInput" type="text" class="form-control" placeholder="Enter text here...">
                                <input type="submit" value="Send message" />
                            </form>


                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/chat/chat.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var messageInput = document.getElementById("messageInput");
        var notificationBar = document.getElementById("notificationBar");

        messageInput.addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                event.preventDefault(); // Prevent the default form submission behavior

                var message = messageInput.value.trim();
                if (message) {
                    // Send the message to the server using AJAX
                    fetch("/Chats/SendMessage", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ message: message })
                    })
                        .then(response => response.json())
                        .then(data => {
                            // Handle the response (e.g., update the chat history)
                            console.log(data);
                            messageInput.value = ""; // Clear the input field
                        })
                        .catch(error => console.error('Error:', error));
                }
            }
        });

        // Function to simulate receiving a new message
       

        // Simulate receiving a new message for demonstration
        // In a real application, this would be triggered by receiving a message from the server
        
    });
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const chatHistory = document.querySelector('.chat-history');
        const messageList = document.querySelector('.chat-history ul');

        // Hàm để cuộn xuống cuối cùng
        function scrollToBottom() {
            chatHistory.scrollTop = chatHistory.scrollHeight;
        }

        // Gọi hàm scrollToBottom khi trang đã tải xong
        scrollToBottom();

        // Lắng nghe sự kiện để cuộn xuống khi có tin nhắn mới
        // Ví dụ: khi nhận được thông báo từ server
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        connection.on("ReceiveMessage", function (message) {
            // Cập nhật danh sách tin nhắn
            const li = document.createElement("li");
            li.textContent = message.content;
            messageList.appendChild(li);
            // Cuộn xuống cuối cùng sau khi thêm tin nhắn mới
            scrollToBottom();
        });

        connection.start().catch(function (err) {
            return console.error(err.toString());
        });
    });
</script>
